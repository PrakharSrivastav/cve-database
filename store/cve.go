package store

import (
	"context"
)

type CVEDBRecord struct {
	ID               int32  `db:"id"`
	CVE              string `db:"cve"`
	RunID            string `db:"run_id"`
	Type             string `db:"type"`
	ResourceID       string `db:"resource_id"`
	Image            string `db:"image"`
	Container        string `db:"container"`
	Host             string `db:"host"`
	NameSpace        string `db:"namespace"`
	Packages         string `db:"packages"`
	RiskScore        string `db:"risk_score"`
	ImpactedPackages string `db:"impacted_packages"`
	CVEDescription   string `db:"cve_description"`
}

const (
	sqlInsertCVE = `INSERT INTO cvedatabase (run_id,type,resource_id,image,container,host,namespace,packages,risk_score,impacted_packages,cve,cve_description) 
VALUES (:run_id,:type,:resource_id,:image,:container,:host,:namespace,:packages,:risk_score,:impacted_packages,:cve,:cve_description) `

	sqlSelectCVE = `SELECT * FROM cvedatabase`
)

func (s *Store) InsertCVEDatabase(ctx context.Context, cve *CVEDBRecord) error {
	_, err := s.db.NamedExecContext(ctx, sqlInsertCVE, cve)
	if err != nil {
		return err
	}
	return nil
}

func (s *Store) SelectCVEDBRecords(ctx context.Context) ([]CVEDBRecord, error) {
	all := make([]CVEDBRecord, 0)
	if err := s.db.SelectContext(ctx, &all, sqlSelectCVE); err != nil {
		return nil, err
	}
	return all, nil
}
