package main

import (
	"context"
	"encoding/json"
	"github.com/PrakharSrivastav/cve-database/store"
	"log/slog"
	"os"
)

var (
	runId        = "cluster-1-scan-1"
	jsonFilePath = "data/cve.1.json"
)

func main() {
	db, err := store.New()
	if err != nil {
		slog.Error("store.create.error", "error", err)
		return
	}
	slog.Info("store.connection.ok")

	file, err := os.ReadFile(jsonFilePath)
	if err != nil {
		slog.Error("file.read.error", err)
		return
	}

	var fileContent []CVERecord

	err = json.Unmarshal(file, &fileContent)
	if err != nil {
		slog.Error("json.unmarshal.error", err)
		return
	}

	ctx := context.Background()

	for _, j := range fileContent {
		if err = db.InsertCVEDatabase(ctx, j.toDbEntity(runId)); err != nil {
			slog.Error("insert.db.error", err)
			return
		}
	}
	slog.Info("data.stored.successfully")

}

type CVERecord struct {
	Type                       string `json:"type"`
	Cve                        string `json:"cve"`
	ResourceID                 string `json:"resourceID"`
	Image                      string `json:"image"`
	ImageID                    string `json:"imageID"`
	Container                  string `json:"container"`
	Host                       string `json:"host"`
	Namespace                  string `json:"namespace"`
	Packages                   string `json:"packages"`
	RiskScore                  string `json:"risk_score"`
	ImpactedPackages           string `json:"impacted_packages"`
	CveDescription             string `json:"cve_description"`
	FactorsNoSecurityProfile   string `json:"factors.noSecurityProfile"`
	FactorsNetwork             string `json:"factors.network"`
	FactorsRootMount           string `json:"factors.rootMount"`
	FactorsHostAccess          string `json:"factors.hostAccess"`
	FactorsRootPrivilege       string `json:"factors.rootPrivilege"`
	FactorsPrivilegedContainer string `json:"factors.privilegedContainer"`
	FactorsEnvVarSecrets       string `json:"factors.envVarSecrets"`
}

func (cve *CVERecord) toDbEntity(runID string) *store.CVEDBRecord {
	return &store.CVEDBRecord{
		RunID:            runID,
		Type:             cve.Type,
		ResourceID:       cve.ResourceID,
		Image:            cve.Image,
		Container:        cve.Container,
		Host:             cve.Host,
		NameSpace:        cve.Namespace,
		Packages:         cve.Packages,
		RiskScore:        cve.RiskScore,
		ImpactedPackages: cve.ImpactedPackages,
		CVEDescription:   cve.CveDescription,
	}
}
